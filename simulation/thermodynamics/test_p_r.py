import sys
from os import path
sys.path.append(path.dirname( path.abspath(__file__)) )
import setup_comp_data as setPVT
sys.path.append(path.dirname( path.dirname( path.dirname( path.abspath(__file__)))))
P=2e5
T=-273.15+300
##pvt={'nitrogen': {'comp': 0.79, 'params': {'acc': 0.0377, 'mm': 0.028, 't_c': 126.2, 'p_c': 34, 'v_c': 0.08921, '_id': 'nitrogen'}}, 'oxygen': {'comp': 0.21, 'params': {'acc': 0.0222, 'mm': 0.032, 't_c': 154.58, 'p_c': 50.43, 'v_c': 0.0734, '_id': 'oxygen'}}}

pvt= setPVT.get_props_and_equalize([(63,'octane'),(36,'methane')])

######################fugacity calc from PR EoS########################
##print pr.get_wilson_K(pvt,T,P)
##print pr.find_vapor_frcn(pvt,T,P,pr.get_wilson_K(pvt,T,P))

######################cubic solver test########################
##print '1 real:\t',pr.cubic_solver(1,1,1,-3)
##print '3 real, 3 the same:\t',pr.cubic_solver(1,-3,3,-1)
##print '3 real, 2 the same:\t',pr.cubic_solver(1,-5,8,-4)
##print '3 real, distinct:\t',pr.cubic_solver(1,-6,11,-6)

######################mixing rules test########################
##print pr.van_der_waal_coefs(pvt,T+273.14,P,comp=None)

######################fugacity calc from PR EoS########################
##import math
##pvt_fug_test=setPVT.get_props_and_equalize([(2,'ethylene'),(8,'argon')])
##P_fug_test=125e5
##T_fug_test=24.95
##lnfug,V= pr.fug_minimum_gibbs(pvt_fug_test,T_fug_test,P_fug_test,1,returnV=True)
##print "P= %s atm, T= %s C" %(P_fug_test/1.013e5,T_fug_test)
##print V*100*100*100
##for i in lnfug:
##    print i,'\t',math.exp(lnfug[i])

##################### lnK calc from EoS#############################
##import math
##lnK =pr.get_eos_lnK(pvt,T,P,{'nitrogen':.83,'oxygen':.17},{'nitrogen':.75,'oxygen':.25})
##for i in lnK:
##    print i,'\t',math.exp(lnK[i])

##################### successive_substitution test#################
##print pr.successive_substitution(pvt,T,P,{'nitrogen':.83,'oxygen':.17},{'nitrogen':.75,'oxygen':.25})

##################### normalize comp####################
##print pr.normalise_comp({'nitrogen':83,'oxygen':127})

##################### stability incl tangent plane###############
##print pr.check_phase_stability(pvt,T,P)

##################### flash calculator ####################
##print pr.pvt_calculator(pvt,T,P)

##comp_l,comp_h,f= {'nitrogen':.83,'oxygen':.17},{'nitrogen':0.03,'oxygen':.97},.95
##comp_l,comp_h= pr.flash_itterate(pvt,T,P,comp_l,comp_h,f)

#################### re-arange matrix #####################
##A={1:{1:0,2:1,3:3,4:3},
##   2:{1:2,2:1,3:2,4:3},
##   3:{1:2,2:0,3:0,4:1},
##   4:{1:1,2:0,3:0,4:0},
##   }
##b={1:1,2:2,3:3,4:4}
##A,b= pr.re_arrange_square_matrix(A,b)
##A,b= pr.gauss_elim(A,b)
##
##for row in A:
##    string="|"
##    for col in A[row]:
##        string+=str(A[row][col])+"\t"
##    string+="|\t"+str(b[row])+" |"
##    print string

################################# Testing Matrix codes ############
##row,dimension=1,4
##row2=row
##if A[row][row]==0:
##        A_new,b_new={},{}
##        row3=row
##        while row3<=dimension:
##                b_new[row3-row+1]=b[row3]
##                col2=row
##                row_new={}
##                while col2<=dimension:
##                        row_new[col2-row+1]=A[row3][col2]
##                        col2+=1
##                A_new[row3-row+1]=row_new
##                row3+=1
##        A_new,b_new=pr.re_arrange_square_matrix(A_new,b_new)
##        row3=row
##        while row3<=dimension:
##                col2=row
##                b[row3]=b_new[row3-row+1]
##                while col2<=dimension:
##                        A[row3][col2]=A_new[row3-row+1][col2-row+1]
##                        col2+=1
##                row3+=1
##A,b=pr.gauss_elim(A,b)
##for row in A:
##    string="|"
##    for col in A[row]:
##        string+=str(A[row][col])+"\t"
##    string+="|\t"+str(b[row])+" |"
##    print string,'\n'
##print pr.solve_triangle_matrix(A,b)

############################## Isotherm plot ####################
##data=[]
##data2=[]
##data3=[]
##T0=int(-273.)
##T1=int(600-273)
##P0=int(1)
##P1=int(12000.6e3)
##steps=20
##for p in range(P0,P1,(P1-P0)/(steps)):
##    for T in range(T0,T1,(T1-T0)/steps):
##        V=None
##        V=pr.pvt_calculator(pvt,T,p)['V']
##
##        if 1e-4<V<.999:
##            data.append({'T':T,'P':p,'V':V})
##        elif V==1:
##            data2.append({'T':T,'P':p,'V':V})
##        elif V==0:
##            data3.append({'T':T,'P':p,'V':V})
##write.write_VLE(data)
##write.write_VLE2(data2)
##write.write_VLE3(data3)

##data=[]
##T0=int(-273.)
##T1=int(600-273)
##P0=int(1)
##P1=int(5e6)
##steps=100
##T=-50.
##for p in range(P0,P1,(P1-P0)/(steps)):
##    roots = pr.solve_PR_for_V(pvt,T,p)[0]
##    for current_root in range(0, len(roots)):
##        print(str(p) + "," + str(roots[current_root]))
        
##write.write_VLE(data)
##print pr.pvt_calculator(pvt,400-273,12e6)['V']
##print pr.pvt_calculator(pvt,400-273.15,90e5)
##
##print pr.solve_PR_for_V(pvt,300-273.15,5e5)[0]
##print pr.fug_minimum_gibbs(pvt,300-273.15,10.5e5,1)
##print pr.get_wilson_K(pvt,300-273.15,10.5e5)

##print pr.michelson_stability(pvt,T,P)
##print pr.check_phase_stability(pvt,T,P)
##print pr.get_initial_bubble_point(pvt)
# print pr.calculate_envelope(pvt)

# import flash
# import flash2
# print flash.get_binary_tangent_planes(pvt,T,P)
# import permutate
# print permutate.get_perms(2)
P=1.013e5
T=50
pvt= setPVT.get_props_and_equalize([(36,'methane'),(64,'octane')])#,])
print pvt
for i in pvt:
    pvt[i]['k']={}
    for j in pvt:
        pvt[i]['k'][j]=0

import flash3
from matplotlib import pyplot as plt

a = flash3.Flash(pvt, 400, P)
a.equilibriate()

x_1=[]
y_1=[]
c_1=[]
x_2=[]
y_2=[]
c_2=[]
x_3=[]
y_3=[]
c_3=[]
for P in range(1,int(140e5),int(3e5)):
    for T in range(-273,600-273,10):
        try:
            a=flash3.Flash(pvt,T,P)
            a.equilibriate()
            if 0<a.phases[0]['frac']<1:

                # col='#%02x%02x%02x' % (a.phases[0]['frac']*255, 0, 255*(1-a.phases[0]['frac']))
                if a.phases[0]['frac']<.5:
                    if a.phases[0]['frac']<.2:
                        x_1.append(T+273)
                        y_1.append(P / 1e3)
                        col='#ff0000'
                        c_1.append(col)
                    else:
                        x_2.append(T + 273)
                        y_2.append(P / 1e3)
                        col = '#00ff00'
                        c_2.append(col)
                else:
                    x_3.append(T + 273)
                    y_3.append(P / 1e3)
                    col='#0000ff'
                    c_3.append(col)
        except:
            pass
plt.scatter(x_1,y_1,c=c_1,alpha=1.,label='0 < V < 0.2')
plt.scatter(x_2,y_2,c=c_2,alpha=1.,label='0.2 < V < 0.5')
plt.scatter(x_3,y_3,c=c_3,alpha=1.,label='0.5 < V < 1')
x=['321.5594444', '325.0455556', '330.0455556', '335.0455556', '340.0455556', '345.0455556', '345.0772222', '350.0455556', '355.0455556', '355.6616667', '360.0455556', '365.0455556', '367.0272222', '370.0455556', '375.0455556', '379.2566667', '380.0455556', '382.5433333', '385.0455556', '390.0455556', '392.4388889', '395.0455556', '400.0455556', '405.0455556', '406.6655556', '410.0455556', '415.0455556', '420.0455556', '422.0244444', '425.0455556', '438.5877778', '456.3883333', '470.5144444', '475.3711111', '495.2955556', '502.18', '515.5066667', '521.5022222', '534.3133333', '534.3522222', '542.6644444', '547.2561111', '547.3538889', '548.5205556', '548.4866667', '548.0233333', '547.05', '546.27', '545.0383333', '543.6261111', '540.9088889', '540.3394444', '535.2172222', '530.1638889', '521.7683333', '514.7477778', '504.3466667', '491.9366667', '482.8005556', '456.9866667', '452.385', '427.0927778', '425.0455556', '420.0455556', '415.995', '415.0455556', '410.0455556', '405.0455556', '400.0455556', '395.0455556', '393.9688889', '390.0455556', '385.0455556', '380.5133333', '380.0455556', '375.0455556', '370.0455556', '365.0455556', '360.0455556', '359.3044444', '355.0455556', '350.0455556', '345.0455556', '342.7466667', '340.0455556', '335.0455556', '330.0455556', '325.0455556', '323.4505556', '320.0455556', '319.4872222', '315.0455556', '310.0455556', '305.0455556', '301.1486111', '300.0455556', '295.8359444', '295.0455556', '290.0455556', '285.4173889', '285.0455556', '280.0455556', '275.0455556', '274.5075556', '271.2574444', '270.0455556', '265.0455556', '260.0455556', '258.0504222', '257.6718222', '255.0455556', '250.0455556', '245.3469444', '245.0455556', '243.9723333', '240.0455556', '235.0455556', '232.7426111', '232.4666667', '230.0455556', '225.0455556', '222.5222222', '220.0455556', '219.7826111', '215.0455556', '213.7188889', '210.0455556', '205.8316667', '205.7762222', '205.0455556', '200.0455556', '198.5055556', '195.0455556', '191.7766667', '190.0455556', '189.7544444', '185.4988889', '185.0455556', '180.0455556', '179.6088889', '174.0577778', '168.8105556', '168.6933333', '163.8394444', '159.1216667', '154.6383333', '150.3744444', '146.3155556', '142.4494444', '138.765', '135.2511111', '131.8988889', '128.6988889', '125.6422222', '123.0455556', '122.7216667', '119.9294444', '117.2577778', '114.7005556', '112.2511111', '109.9038889', '107.6533333', '105.4933333', '103.4194444', '101.4272222', '99.51166667', '97.66888889', '95.895', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556', '0.045555556']
y=['10.02773458', '11.75073436', '14.65273758', '18.13183196', '22.27489144', '27.17637419', '27.2101585', '32.93977052', '39.67656863', '40.5796439', '47.50804732', '56.56500011', '60.52417643', '66.98787322', '78.92724812', '90.27787973', '92.54432425', '100.0277556', '108.0110293', '125.5111912', '134.6652221', '145.2400557', '167.4058031', '192.2306515', '200.8835715', '219.9496431', '250.8154017', '285.096823', '299.6688919', '323.0786604', '447.0401859', '666.8919234', '900.0277893', '994.8720666', '1484.158497', '1700.033339', '2214.092631', '2500.031993', '3300.030648', '3303.029867', '4100.036198', '4900.034852', '4927.524248', '5588.283286', '5700.040402', '6018.488543', '6327.063393', '6500.039057', '6718.306379', '6922.908293', '7241.563277', '7300.030816', '7747.224755', '8100.029471', '8572.734011', '8900.028126', '9305.37089', '9700.026781', '9940.722747', '10437.42104', '10500.02544', '10711.69448', '10719.00292', '10730.724', '10733.6198', '10733.48191', '10727.20768', '10711.90132', '10687.28704', '10653.29588', '10644.74638', '10609.78997', '10556.70034', '10500.02544', '10493.75121', '10420.87362', '10337.86075', '10244.57469', '10140.94649', '10124.67486', '10026.70037', '9901.836318', '9766.078553', '9700.026781', '9619.427071', '9461.812926', '9293.029275', '9113.145065', '9053.367522', '8922.091348', '8900.028126', '8719.937073', '8506.682239', '8282.395794', '8100.029471', '8047.28458', '7841.131346', '7801.555441', '7545.691008', '7300.030816', '7279.967074', '7004.728374', '6720.616122', '6689.562137', '6500.039057', '6428.554216', '6129.225236', '5823.5255', '5700.040402', '5676.522386', '5512.723644', '5198.074513', '4900.034852', '4880.874323', '4812.616228', '4562.819182', '4245.474202', '4100.036198', '4082.654515', '3930.645808', '3620.154216', '3465.677185', '3315.826536', '3300.030648', '3019.482986', '2942.413392', '2732.861043', '2500.031993', '2497.025879', '2457.56029', '2195.042418', '2116.945505', '1946.555375', '1792.174871', '1713.133377', '1700.033339', '1514.633323', '1495.56932', '1294.428574', '1277.646735', '1075.595882', '903.6544314', '900.0277893', '757.6807047', '634.0418537', '529.5807694', '441.5381699', '367.5105429', '305.4101561', '253.4278251', '210.005335', '173.8016555', '143.6718432', '118.6375321', '100.0277556', '97.86896582', '80.66348583', '66.4280879', '54.66411561', '44.95291932', '36.94417643', '30.34520451', '24.91282547', '20.44364398', '16.77011745', '13.75159284', '11.2729277', '9.23897438', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028', '0.027579028']
plt.plot(x,y,label='PVTP')
plt.legend(bbox_to_anchor=(0.05, .95), loc=2, borderaxespad=0.)
plt.xlabel('T (K)')
plt.ylabel('P (kPa)')
plt.show()
# print 'start'
# stuff=flash.System(pvt,P,T)
# vap=stuff._equilibriate()
# for i in stuff.phases:
#     print i['type'],i['phase'].moles,i['phase'].pvt['methane']['comp']


# print stuff.tangents
# print [(l['type'],l['phase'].moles) for l in stuff.phases]

# print pr.fug_minimum_gibbs(pvt,T, P, 1, phase='light',comp={'water':.0645,'propane':.9355})
# print pr.fug_minimum_gibbs(setPVT.get_props_and_equalize([(1e8,'water'),(1e-4,'aniline')]),T, P, 1, phase='light')